#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled1:server');
var http = require('http');
var net = require('net');
var flag = require('../manager/flag');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

var clients = [];

var socketServer = net.createServer(function (client) {
    console.log('   remote = %s:%s', client.remoteAddress, client.remotePort);
    var clientTmp = {};
    clientTmp.client = client;
    clientTmp.onRead = function (data) {
        try {
            data = JSON.parse(data);
            console.log(data);
            if (data.flag == flag.FLAG_REG_DEVICE) {
                for (var i = 0; i < clients.length; i++) {
                    if (clients[i].id == data.id) {
                        clients[i].destroy();
                        clients.splice(i, 1);
                        break;
                    }
                }
                this.id = data.id;
                this.deviceName = data.deviceName;
                this.write(JSON.stringify(flag.FLAG_SUCCESS) + '\n');
                clients.push(client);
            } else if (data.flag == flag.FLAG_SEND_DATA) {
                this.res.json(data);
            } else if (data.flag == flag.FLAG_SAVE_DATA) {
                this.data = data;
                console.log("save:"+this.data);
                this.write(JSON.stringify(flag.FLAG_SUCCESS) + '\n');
            } else {
                this.write(flag.FLAG_FAIL);
            }
        } catch (e) {
            console.log(e);
        }
    };
    client.on('data', clientTmp.onRead);
    client.on('end', function () {
        console.log('   remote = %s:%s close', client.remoteAddress, client.remotePort);
        for (var i = 0; i < clients.length; i++) {
            if (client === clients[i]) {
                clients.splice(i, 1);
                return;
            }
        }

    });
});

socketServer.listen(8107, function () {
    console.log('Server listening for connection');
});

exports.clients = clients;